generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(active)

  // Define the one-to-one relationship with UserProfile
  profile        UserProfile?
  agentListings  UsedCarListing[] @relation("AgentListings")
  sellerListings UsedCarListing[] @relation("SellerListings")
  Shortlist      Shortlist[]
}

model UsedCarListing {
  id               String   @id @default(cuid())
  title            String
  agentEmail       String
  sellerEmail      String
  viewCount        Int      @default(0)
  shortlistCount   Int      @default(0)
  mileage          Int
  color            String
  condition        String
  imgUrl           String
  manufacturedYear Int
  price            Float
  description      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Define separate relationships for agent and seller using agentID and sellerID
  agent  User @relation("AgentListings", fields: [agentEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)
  seller User @relation("SellerListings", fields: [sellerEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)

  Shortlist Shortlist[]
}

model UserProfile {
  id           String   @id @default(cuid())
  userEmail    String   @unique // Unique userEmail to ensure one-to-one relationship
  user         User     @relation(fields: [userEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)
  name         String
  address      String
  mobileNumber String
  status       Status   @default(active)
  role         Role     @default(buyer)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AgentReview {
  id         String   @id @default(cuid())
  agentEmail String
  userEmail  String
  comment    String
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Shortlist {
  id         String         @id @default(cuid())
  userEmail  String
  listingId  String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)
  carlisting UsedCarListing @relation(fields: [listingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userEmail, listingId], name: "listingId_userEmail")
}

enum Role {
  admin
  agent
  buyer
  seller
}

enum Status {
  active
  inactive
}
